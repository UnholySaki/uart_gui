
BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003128  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003234  08003234  00004234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003258  08003258  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003258  08003258  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003258  08003258  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003258  08003258  00004258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800325c  0800325c  0000425c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003260  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000010  0800326c  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  0800326c  000050a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dea  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8e  00000000  00000000  0000ce1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0000e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000678  00000000  00000000  0000f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176b4  00000000  00000000  0000f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b02a  00000000  00000000  00026e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089569  00000000  00000000  00031e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb3df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000219c  00000000  00000000  000bb424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000bd5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800321c 	.word	0x0800321c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800321c 	.word	0x0800321c

0800014c <go_to_main_app>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/


void go_to_main_app(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pfunction Jump_To_Application;

	//check for code
	if (((*(uint32_t*) FLASH_MAIN_APP_ADDR) & 0x2FFE0000) == 0x20000000){
 8000152:	4b17      	ldr	r3, [pc, #92]	@ (80001b0 <go_to_main_app+0x64>)
 8000154:	681a      	ldr	r2, [r3, #0]
 8000156:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <go_to_main_app+0x68>)
 8000158:	4013      	ands	r3, r2
 800015a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800015e:	d11d      	bne.n	800019c <go_to_main_app+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000160:	b672      	cpsid	i
}
 8000162:	bf00      	nop
		__disable_irq();

		HAL_FLASH_Unlock();
 8000164:	f000 fcda 	bl	8000b1c <HAL_FLASH_Unlock>
		FLASH_PageErase(JUMP2UPD_FLAG_ADDR);
 8000168:	4813      	ldr	r0, [pc, #76]	@ (80001b8 <go_to_main_app+0x6c>)
 800016a:	f000 fdbf 	bl	8000cec <FLASH_PageErase>
		CLEAR_BIT(FLASH->CR, (FLASH_CR_PER));
 800016e:	4b13      	ldr	r3, [pc, #76]	@ (80001bc <go_to_main_app+0x70>)
 8000170:	691b      	ldr	r3, [r3, #16]
 8000172:	4a12      	ldr	r2, [pc, #72]	@ (80001bc <go_to_main_app+0x70>)
 8000174:	f023 0302 	bic.w	r3, r3, #2
 8000178:	6113      	str	r3, [r2, #16]
		HAL_FLASH_Lock();
 800017a:	f000 fcf5 	bl	8000b68 <HAL_FLASH_Lock>

		JumpAddress = *(uint32_t *) (FLASH_MAIN_APP_ADDR + 4);
 800017e:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <go_to_main_app+0x74>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	60fb      	str	r3, [r7, #12]
		Jump_To_Application = (pfunction) JumpAddress;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	60bb      	str	r3, [r7, #8]

		__set_MSP(*(uint32_t*) FLASH_MAIN_APP_ADDR);
 8000188:	4b09      	ldr	r3, [pc, #36]	@ (80001b0 <go_to_main_app+0x64>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f383 8808 	msr	MSP, r3
}
 8000194:	bf00      	nop
		Jump_To_Application();
 8000196:	68bb      	ldr	r3, [r7, #8]
 8000198:	4798      	blx	r3
	}
	else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	}
}
 800019a:	e004      	b.n	80001a6 <go_to_main_app+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800019c:	2201      	movs	r2, #1
 800019e:	2102      	movs	r1, #2
 80001a0:	4808      	ldr	r0, [pc, #32]	@ (80001c4 <go_to_main_app+0x78>)
 80001a2:	f000 ff47 	bl	8001034 <HAL_GPIO_WritePin>
}
 80001a6:	bf00      	nop
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	08008000 	.word	0x08008000
 80001b4:	2ffe0000 	.word	0x2ffe0000
 80001b8:	0801f000 	.word	0x0801f000
 80001bc:	40022000 	.word	0x40022000
 80001c0:	08008004 	.word	0x08008004
 80001c4:	40010c00 	.word	0x40010c00

080001c8 <go_to_update_app>:


void go_to_update_app(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pfunction Jump_To_Application;


	//check for code
	if (((*(uint32_t*) FLASH_UPDATE_APP_ADDR) & 0x2FFE0000) == 0x20000000){
 80001ce:	4b17      	ldr	r3, [pc, #92]	@ (800022c <go_to_update_app+0x64>)
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	4b17      	ldr	r3, [pc, #92]	@ (8000230 <go_to_update_app+0x68>)
 80001d4:	4013      	ands	r3, r2
 80001d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80001da:	d11d      	bne.n	8000218 <go_to_update_app+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 80001dc:	b672      	cpsid	i
}
 80001de:	bf00      	nop
		__disable_irq();

		//clear flag
		HAL_FLASH_Unlock();
 80001e0:	f000 fc9c 	bl	8000b1c <HAL_FLASH_Unlock>
		FLASH_PageErase(JUMP2UPD_FLAG_ADDR);
 80001e4:	4813      	ldr	r0, [pc, #76]	@ (8000234 <go_to_update_app+0x6c>)
 80001e6:	f000 fd81 	bl	8000cec <FLASH_PageErase>
		CLEAR_BIT(FLASH->CR, (FLASH_CR_PER));
 80001ea:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <go_to_update_app+0x70>)
 80001ec:	691b      	ldr	r3, [r3, #16]
 80001ee:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <go_to_update_app+0x70>)
 80001f0:	f023 0302 	bic.w	r3, r3, #2
 80001f4:	6113      	str	r3, [r2, #16]
		HAL_FLASH_Lock();
 80001f6:	f000 fcb7 	bl	8000b68 <HAL_FLASH_Lock>

		//jump to app
		JumpAddress = *(uint32_t *) (FLASH_UPDATE_APP_ADDR + 4);
 80001fa:	4b10      	ldr	r3, [pc, #64]	@ (800023c <go_to_update_app+0x74>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	60fb      	str	r3, [r7, #12]
		Jump_To_Application = (pfunction) JumpAddress;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	60bb      	str	r3, [r7, #8]

		__set_MSP(*(uint32_t*) FLASH_UPDATE_APP_ADDR);
 8000204:	4b09      	ldr	r3, [pc, #36]	@ (800022c <go_to_update_app+0x64>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f383 8808 	msr	MSP, r3
}
 8000210:	bf00      	nop
		Jump_To_Application();
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	4798      	blx	r3
	}
	else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	}
}
 8000216:	e004      	b.n	8000222 <go_to_update_app+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000218:	2201      	movs	r2, #1
 800021a:	2102      	movs	r1, #2
 800021c:	4808      	ldr	r0, [pc, #32]	@ (8000240 <go_to_update_app+0x78>)
 800021e:	f000 ff09 	bl	8001034 <HAL_GPIO_WritePin>
}
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	08010000 	.word	0x08010000
 8000230:	2ffe0000 	.word	0x2ffe0000
 8000234:	0801f000 	.word	0x0801f000
 8000238:	40022000 	.word	0x40022000
 800023c:	08010004 	.word	0x08010004
 8000240:	40010c00 	.word	0x40010c00

08000244 <update_main_app>:

void update_main_app(void){
 8000244:	b5b0      	push	{r4, r5, r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
	uint32_t READ_ADDRESS  = 0x08010000;
 800024a:	4b3e      	ldr	r3, [pc, #248]	@ (8000344 <update_main_app+0x100>)
 800024c:	60fb      	str	r3, [r7, #12]
	uint32_t WRITE_ADDRESS = 0x08008000;
 800024e:	4b3e      	ldr	r3, [pc, #248]	@ (8000348 <update_main_app+0x104>)
 8000250:	60bb      	str	r3, [r7, #8]
	uint32_t result = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000256:	b672      	cpsid	i
}
 8000258:	bf00      	nop


	__disable_irq();

	// clear flag
	HAL_FLASH_Unlock();
 800025a:	f000 fc5f 	bl	8000b1c <HAL_FLASH_Unlock>
	FLASH_PageErase(UPDMAIN_FLAG_ADDR);
 800025e:	483b      	ldr	r0, [pc, #236]	@ (800034c <update_main_app+0x108>)
 8000260:	f000 fd44 	bl	8000cec <FLASH_PageErase>
	CLEAR_BIT(FLASH->CR, (FLASH_CR_PER));
 8000264:	4b3a      	ldr	r3, [pc, #232]	@ (8000350 <update_main_app+0x10c>)
 8000266:	691b      	ldr	r3, [r3, #16]
 8000268:	4a39      	ldr	r2, [pc, #228]	@ (8000350 <update_main_app+0x10c>)
 800026a:	f023 0302 	bic.w	r3, r3, #2
 800026e:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8000270:	f000 fc7a 	bl	8000b68 <HAL_FLASH_Lock>


	// ERASE MAIN APPLICATION
	HAL_FLASH_Unlock();
 8000274:	f000 fc52 	bl	8000b1c <HAL_FLASH_Unlock>
	while(WRITE_ADDRESS < 0x08010000){
 8000278:	e00c      	b.n	8000294 <update_main_app+0x50>
		FLASH_PageErase(WRITE_ADDRESS);
 800027a:	68b8      	ldr	r0, [r7, #8]
 800027c:	f000 fd36 	bl	8000cec <FLASH_PageErase>
		CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 8000280:	4b33      	ldr	r3, [pc, #204]	@ (8000350 <update_main_app+0x10c>)
 8000282:	691b      	ldr	r3, [r3, #16]
 8000284:	4a32      	ldr	r2, [pc, #200]	@ (8000350 <update_main_app+0x10c>)
 8000286:	f023 0302 	bic.w	r3, r3, #2
 800028a:	6113      	str	r3, [r2, #16]
		WRITE_ADDRESS += 0x00000400; //1 PAGE
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000292:	60bb      	str	r3, [r7, #8]
	while(WRITE_ADDRESS < 0x08010000){
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	4a2f      	ldr	r2, [pc, #188]	@ (8000354 <update_main_app+0x110>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d9ee      	bls.n	800027a <update_main_app+0x36>
	}
	HAL_FLASH_Lock();
 800029c:	f000 fc64 	bl	8000b68 <HAL_FLASH_Lock>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2180      	movs	r1, #128	@ 0x80
 80002a4:	482c      	ldr	r0, [pc, #176]	@ (8000358 <update_main_app+0x114>)
 80002a6:	f000 fec5 	bl	8001034 <HAL_GPIO_WritePin>

	// WRITE MAIN APPLICATION
	HAL_FLASH_Unlock();
 80002aa:	f000 fc37 	bl	8000b1c <HAL_FLASH_Unlock>
	WRITE_ADDRESS = 0x08008000;
 80002ae:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <update_main_app+0x104>)
 80002b0:	60bb      	str	r3, [r7, #8]
	while(WRITE_ADDRESS < 0x08010000){
 80002b2:	e036      	b.n	8000322 <update_main_app+0xde>
		for (int i = 0; i<4; i++){
 80002b4:	2300      	movs	r3, #0
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	e00c      	b.n	80002d4 <update_main_app+0x90>
			read_data[i] = *(uint8_t *) READ_ADDRESS;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	7819      	ldrb	r1, [r3, #0]
 80002be:	4a27      	ldr	r2, [pc, #156]	@ (800035c <update_main_app+0x118>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4413      	add	r3, r2
 80002c4:	460a      	mov	r2, r1
 80002c6:	701a      	strb	r2, [r3, #0]
			READ_ADDRESS++;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i<4; i++){
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3301      	adds	r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	ddef      	ble.n	80002ba <update_main_app+0x76>
		}

		result = (read_data[3] << 24) | (read_data[2] << 16) | (read_data[1] << 8) | read_data[0];
 80002da:	4b20      	ldr	r3, [pc, #128]	@ (800035c <update_main_app+0x118>)
 80002dc:	78db      	ldrb	r3, [r3, #3]
 80002de:	061a      	lsls	r2, r3, #24
 80002e0:	4b1e      	ldr	r3, [pc, #120]	@ (800035c <update_main_app+0x118>)
 80002e2:	789b      	ldrb	r3, [r3, #2]
 80002e4:	041b      	lsls	r3, r3, #16
 80002e6:	431a      	orrs	r2, r3
 80002e8:	4b1c      	ldr	r3, [pc, #112]	@ (800035c <update_main_app+0x118>)
 80002ea:	785b      	ldrb	r3, [r3, #1]
 80002ec:	021b      	lsls	r3, r3, #8
 80002ee:	4313      	orrs	r3, r2
 80002f0:	4a1a      	ldr	r2, [pc, #104]	@ (800035c <update_main_app+0x118>)
 80002f2:	7812      	ldrb	r2, [r2, #0]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	603b      	str	r3, [r7, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WRITE_ADDRESS, result);
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	2200      	movs	r2, #0
 80002fc:	461c      	mov	r4, r3
 80002fe:	4615      	mov	r5, r2
 8000300:	4622      	mov	r2, r4
 8000302:	462b      	mov	r3, r5
 8000304:	68b9      	ldr	r1, [r7, #8]
 8000306:	2002      	movs	r0, #2
 8000308:	f000 fb98 	bl	8000a3c <HAL_FLASH_Program>
		CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 800030c:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <update_main_app+0x10c>)
 800030e:	691b      	ldr	r3, [r3, #16]
 8000310:	4a0f      	ldr	r2, [pc, #60]	@ (8000350 <update_main_app+0x10c>)
 8000312:	f023 0301 	bic.w	r3, r3, #1
 8000316:	6113      	str	r3, [r2, #16]
		WRITE_ADDRESS+= 0x04;
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	3304      	adds	r3, #4
 800031c:	60bb      	str	r3, [r7, #8]

		result = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	603b      	str	r3, [r7, #0]
	while(WRITE_ADDRESS < 0x08010000){
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	4a0b      	ldr	r2, [pc, #44]	@ (8000354 <update_main_app+0x110>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d9c4      	bls.n	80002b4 <update_main_app+0x70>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2180      	movs	r1, #128	@ 0x80
 800032e:	480a      	ldr	r0, [pc, #40]	@ (8000358 <update_main_app+0x114>)
 8000330:	f000 fe80 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_FLASH_Lock();
 8000334:	f000 fc18 	bl	8000b68 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000338:	b662      	cpsie	i
}
 800033a:	bf00      	nop
	__enable_irq();
}
 800033c:	bf00      	nop
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bdb0      	pop	{r4, r5, r7, pc}
 8000344:	08010000 	.word	0x08010000
 8000348:	08008000 	.word	0x08008000
 800034c:	0801f004 	.word	0x0801f004
 8000350:	40022000 	.word	0x40022000
 8000354:	0800ffff 	.word	0x0800ffff
 8000358:	40010800 	.word	0x40010800
 800035c:	20000080 	.word	0x20000080

08000360 <main>:




int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000364:	f000 f99e 	bl	80006a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000368:	f000 f826 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036c:	f000 f86a 	bl	8000444 <MX_GPIO_Init>
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */


  //read the flag
  HAL_FLASH_Unlock();
 8000370:	f000 fbd4 	bl	8000b1c <HAL_FLASH_Unlock>
  read_data[0] = *(uint8_t *) JUMP2UPD_FLAG_ADDR;
 8000374:	4b0d      	ldr	r3, [pc, #52]	@ (80003ac <main+0x4c>)
 8000376:	781a      	ldrb	r2, [r3, #0]
 8000378:	4b0d      	ldr	r3, [pc, #52]	@ (80003b0 <main+0x50>)
 800037a:	701a      	strb	r2, [r3, #0]
  read_data[1] = *(uint8_t *) UPDMAIN_FLAG_ADDR;
 800037c:	4b0d      	ldr	r3, [pc, #52]	@ (80003b4 <main+0x54>)
 800037e:	781a      	ldrb	r2, [r3, #0]
 8000380:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <main+0x50>)
 8000382:	705a      	strb	r2, [r3, #1]
  HAL_FLASH_Lock();
 8000384:	f000 fbf0 	bl	8000b68 <HAL_FLASH_Lock>

  if (read_data[1] == 0x01){
 8000388:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <main+0x50>)
 800038a:	785b      	ldrb	r3, [r3, #1]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d101      	bne.n	8000394 <main+0x34>
	  update_main_app();
 8000390:	f7ff ff58 	bl	8000244 <update_main_app>
  }

  // if there is a flag, go to update application
  //else goto main application
  if (read_data[0] == 0x01){
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <main+0x50>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d102      	bne.n	80003a2 <main+0x42>
	  go_to_update_app();
 800039c:	f7ff ff14 	bl	80001c8 <go_to_update_app>
 80003a0:	e002      	b.n	80003a8 <main+0x48>
  }
  else {
	  go_to_main_app();
 80003a2:	f7ff fed3 	bl	800014c <go_to_main_app>
  }
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <main+0x48>
 80003ac:	0801f000 	.word	0x0801f000
 80003b0:	20000080 	.word	0x20000080
 80003b4:	0801f004 	.word	0x0801f004

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b090      	sub	sp, #64	@ 0x40
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2228      	movs	r2, #40	@ 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fefc 	bl	80031c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003da:	2301      	movs	r3, #1
 80003dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	2301      	movs	r3, #1
 80003ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ec:	2302      	movs	r3, #2
 80003ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fc:	f107 0318 	add.w	r3, r7, #24
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fb01 	bl	8002a08 <HAL_RCC_OscConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800040c:	f000 f8b6 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000410:	230f      	movs	r3, #15
 8000412:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000414:	2302      	movs	r3, #2
 8000416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2102      	movs	r1, #2
 800042a:	4618      	mov	r0, r3
 800042c:	f002 fd6e 	bl	8002f0c <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000436:	f000 f8a1 	bl	800057c <Error_Handler>
  }
}
 800043a:	bf00      	nop
 800043c:	3740      	adds	r7, #64	@ 0x40
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000458:	4b44      	ldr	r3, [pc, #272]	@ (800056c <MX_GPIO_Init+0x128>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a43      	ldr	r2, [pc, #268]	@ (800056c <MX_GPIO_Init+0x128>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b41      	ldr	r3, [pc, #260]	@ (800056c <MX_GPIO_Init+0x128>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0310 	and.w	r3, r3, #16
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000470:	4b3e      	ldr	r3, [pc, #248]	@ (800056c <MX_GPIO_Init+0x128>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a3d      	ldr	r2, [pc, #244]	@ (800056c <MX_GPIO_Init+0x128>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b3b      	ldr	r3, [pc, #236]	@ (800056c <MX_GPIO_Init+0x128>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0320 	and.w	r3, r3, #32
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000488:	4b38      	ldr	r3, [pc, #224]	@ (800056c <MX_GPIO_Init+0x128>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a37      	ldr	r2, [pc, #220]	@ (800056c <MX_GPIO_Init+0x128>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b35      	ldr	r3, [pc, #212]	@ (800056c <MX_GPIO_Init+0x128>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	4b32      	ldr	r3, [pc, #200]	@ (800056c <MX_GPIO_Init+0x128>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a31      	ldr	r2, [pc, #196]	@ (800056c <MX_GPIO_Init+0x128>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b2f      	ldr	r3, [pc, #188]	@ (800056c <MX_GPIO_Init+0x128>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0308 	and.w	r3, r3, #8
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004be:	482c      	ldr	r0, [pc, #176]	@ (8000570 <MX_GPIO_Init+0x12c>)
 80004c0:	f000 fdb8 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2180      	movs	r1, #128	@ 0x80
 80004c8:	482a      	ldr	r0, [pc, #168]	@ (8000574 <MX_GPIO_Init+0x130>)
 80004ca:	f000 fdb3 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004d4:	4828      	ldr	r0, [pc, #160]	@ (8000578 <MX_GPIO_Init+0x134>)
 80004d6:	f000 fdad 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2302      	movs	r3, #2
 80004ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	481f      	ldr	r0, [pc, #124]	@ (8000570 <MX_GPIO_Init+0x12c>)
 80004f4:	f000 fc1a 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004f8:	2380      	movs	r3, #128	@ 0x80
 80004fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	2301      	movs	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	2302      	movs	r3, #2
 8000506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	4819      	ldr	r0, [pc, #100]	@ (8000574 <MX_GPIO_Init+0x130>)
 8000510:	f000 fc0c 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000514:	2301      	movs	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800051c:	2302      	movs	r3, #2
 800051e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4814      	ldr	r0, [pc, #80]	@ (8000578 <MX_GPIO_Init+0x134>)
 8000528:	f000 fc00 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800052c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	480d      	ldr	r0, [pc, #52]	@ (8000578 <MX_GPIO_Init+0x134>)
 8000542:	f000 fbf3 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000546:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2302      	movs	r3, #2
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	@ (8000578 <MX_GPIO_Init+0x134>)
 8000560:	f000 fbe4 	bl	8000d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	40011000 	.word	0x40011000
 8000574:	40010800 	.word	0x40010800
 8000578:	40010c00 	.word	0x40010c00

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <Error_Handler+0x8>

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <HAL_MspInit+0x40>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <HAL_MspInit+0x40>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <HAL_MspInit+0x40>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <HAL_MspInit+0x40>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <HAL_MspInit+0x40>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <HAL_MspInit+0x40>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000

080005cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <NMI_Handler+0x4>

080005d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <MemManage_Handler+0x4>

080005e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061c:	f000 f888 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000628:	4802      	ldr	r0, [pc, #8]	@ (8000634 <I2C1_EV_IRQHandler+0x10>)
 800062a:	f000 fd2f 	bl	800108c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000002c 	.word	0x2000002c

08000638 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <I2C1_ER_IRQHandler+0x10>)
 800063e:	f000 fe78 	bl	8001332 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000002c 	.word	0x2000002c

0800064c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff fff8 	bl	800064c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800065e:	490c      	ldr	r1, [pc, #48]	@ (8000690 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a09      	ldr	r2, [pc, #36]	@ (8000698 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000674:	4c09      	ldr	r4, [pc, #36]	@ (800069c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f002 fda7 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fe6b 	bl	8000360 <main>
  bx lr
 800068a:	4770      	bx	lr
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000694:	08003260 	.word	0x08003260
  ldr r2, =_sbss
 8000698:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800069c:	200000a8 	.word	0x200000a8

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f907 	bl	80008c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	200f      	movs	r0, #15
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff ff62 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f911 	bl	8000916 <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 f8e7 	bl	80008de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	@ (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a03      	ldr	r2, [pc, #12]	@ (8000750 <HAL_IncTick+0x20>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000008 	.word	0x20000008
 8000750:	20000084 	.word	0x20000084

08000754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	@ (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000084 	.word	0x20000084

08000768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079a:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db0a      	blt.n	80007f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	490c      	ldr	r1, [pc, #48]	@ (8000818 <__NVIC_SetPriority+0x4c>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	0112      	lsls	r2, r2, #4
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	440b      	add	r3, r1
 80007f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f4:	e00a      	b.n	800080c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4908      	ldr	r1, [pc, #32]	@ (800081c <__NVIC_SetPriority+0x50>)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	3b04      	subs	r3, #4
 8000804:	0112      	lsls	r2, r2, #4
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	440b      	add	r3, r1
 800080a:	761a      	strb	r2, [r3, #24]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	@ 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	f1c3 0307 	rsb	r3, r3, #7
 800083a:	2b04      	cmp	r3, #4
 800083c:	bf28      	it	cs
 800083e:	2304      	movcs	r3, #4
 8000840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3304      	adds	r3, #4
 8000846:	2b06      	cmp	r3, #6
 8000848:	d902      	bls.n	8000850 <NVIC_EncodePriority+0x30>
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3b03      	subs	r3, #3
 800084e:	e000      	b.n	8000852 <NVIC_EncodePriority+0x32>
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	f04f 32ff 	mov.w	r2, #4294967295
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43da      	mvns	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	401a      	ands	r2, r3
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000868:	f04f 31ff 	mov.w	r1, #4294967295
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	43d9      	mvns	r1, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	4313      	orrs	r3, r2
         );
}
 800087a:	4618      	mov	r0, r3
 800087c:	3724      	adds	r7, #36	@ 0x24
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000894:	d301      	bcc.n	800089a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000896:	2301      	movs	r3, #1
 8000898:	e00f      	b.n	80008ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <SysTick_Config+0x40>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a2:	210f      	movs	r1, #15
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295
 80008a8:	f7ff ff90 	bl	80007cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <SysTick_Config+0x40>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b2:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <SysTick_Config+0x40>)
 80008b4:	2207      	movs	r2, #7
 80008b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	e000e010 	.word	0xe000e010

080008c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff49 	bl	8000768 <__NVIC_SetPriorityGrouping>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
 80008ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f0:	f7ff ff5e 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 80008f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	6978      	ldr	r0, [r7, #20]
 80008fc:	f7ff ff90 	bl	8000820 <NVIC_EncodePriority>
 8000900:	4602      	mov	r2, r0
 8000902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff5f 	bl	80007cc <__NVIC_SetPriority>
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ffb0 	bl	8000884 <SysTick_Config>
 8000924:	4603      	mov	r3, r0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b02      	cmp	r3, #2
 8000946:	d005      	beq.n	8000954 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2204      	movs	r2, #4
 800094c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	e051      	b.n	80009f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 020e 	bic.w	r2, r2, #14
 8000962:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0201 	bic.w	r2, r2, #1
 8000972:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a22      	ldr	r2, [pc, #136]	@ (8000a04 <HAL_DMA_Abort_IT+0xd4>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d029      	beq.n	80009d2 <HAL_DMA_Abort_IT+0xa2>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <HAL_DMA_Abort_IT+0xd8>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d022      	beq.n	80009ce <HAL_DMA_Abort_IT+0x9e>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a1f      	ldr	r2, [pc, #124]	@ (8000a0c <HAL_DMA_Abort_IT+0xdc>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d01a      	beq.n	80009c8 <HAL_DMA_Abort_IT+0x98>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a1e      	ldr	r2, [pc, #120]	@ (8000a10 <HAL_DMA_Abort_IT+0xe0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d012      	beq.n	80009c2 <HAL_DMA_Abort_IT+0x92>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a14 <HAL_DMA_Abort_IT+0xe4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d00a      	beq.n	80009bc <HAL_DMA_Abort_IT+0x8c>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000a18 <HAL_DMA_Abort_IT+0xe8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d102      	bne.n	80009b6 <HAL_DMA_Abort_IT+0x86>
 80009b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80009b4:	e00e      	b.n	80009d4 <HAL_DMA_Abort_IT+0xa4>
 80009b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009ba:	e00b      	b.n	80009d4 <HAL_DMA_Abort_IT+0xa4>
 80009bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009c0:	e008      	b.n	80009d4 <HAL_DMA_Abort_IT+0xa4>
 80009c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c6:	e005      	b.n	80009d4 <HAL_DMA_Abort_IT+0xa4>
 80009c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009cc:	e002      	b.n	80009d4 <HAL_DMA_Abort_IT+0xa4>
 80009ce:	2310      	movs	r3, #16
 80009d0:	e000      	b.n	80009d4 <HAL_DMA_Abort_IT+0xa4>
 80009d2:	2301      	movs	r3, #1
 80009d4:	4a11      	ldr	r2, [pc, #68]	@ (8000a1c <HAL_DMA_Abort_IT+0xec>)
 80009d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d003      	beq.n	80009f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	4798      	blx	r3
    } 
  }
  return status;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40020008 	.word	0x40020008
 8000a08:	4002001c 	.word	0x4002001c
 8000a0c:	40020030 	.word	0x40020030
 8000a10:	40020044 	.word	0x40020044
 8000a14:	40020058 	.word	0x40020058
 8000a18:	4002006c 	.word	0x4002006c
 8000a1c:	40020000 	.word	0x40020000

08000a20 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a2e:	b2db      	uxtb	r3, r3
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
	...

08000a3c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000a56:	4b2f      	ldr	r3, [pc, #188]	@ (8000b14 <HAL_FLASH_Program+0xd8>)
 8000a58:	7e1b      	ldrb	r3, [r3, #24]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d101      	bne.n	8000a62 <HAL_FLASH_Program+0x26>
 8000a5e:	2302      	movs	r3, #2
 8000a60:	e054      	b.n	8000b0c <HAL_FLASH_Program+0xd0>
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <HAL_FLASH_Program+0xd8>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000a68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000a6c:	f000 f8a8 	bl	8000bc0 <FLASH_WaitForLastOperation>
 8000a70:	4603      	mov	r3, r0
 8000a72:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d144      	bne.n	8000b04 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d102      	bne.n	8000a86 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000a80:	2301      	movs	r3, #1
 8000a82:	757b      	strb	r3, [r7, #21]
 8000a84:	e007      	b.n	8000a96 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d102      	bne.n	8000a92 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	757b      	strb	r3, [r7, #21]
 8000a90:	e001      	b.n	8000a96 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000a92:	2304      	movs	r3, #4
 8000a94:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	75bb      	strb	r3, [r7, #22]
 8000a9a:	e02d      	b.n	8000af8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000a9c:	7dbb      	ldrb	r3, [r7, #22]
 8000a9e:	005a      	lsls	r2, r3, #1
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	eb02 0c03 	add.w	ip, r2, r3
 8000aa6:	7dbb      	ldrb	r3, [r7, #22]
 8000aa8:	0119      	lsls	r1, r3, #4
 8000aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000aae:	f1c1 0620 	rsb	r6, r1, #32
 8000ab2:	f1a1 0020 	sub.w	r0, r1, #32
 8000ab6:	fa22 f401 	lsr.w	r4, r2, r1
 8000aba:	fa03 f606 	lsl.w	r6, r3, r6
 8000abe:	4334      	orrs	r4, r6
 8000ac0:	fa23 f000 	lsr.w	r0, r3, r0
 8000ac4:	4304      	orrs	r4, r0
 8000ac6:	fa23 f501 	lsr.w	r5, r3, r1
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4660      	mov	r0, ip
 8000ad0:	f000 f85a 	bl	8000b88 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ad4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000ad8:	f000 f872 	bl	8000bc0 <FLASH_WaitForLastOperation>
 8000adc:	4603      	mov	r3, r0
 8000ade:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <HAL_FLASH_Program+0xdc>)
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <HAL_FLASH_Program+0xdc>)
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000aec:	7dfb      	ldrb	r3, [r7, #23]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d107      	bne.n	8000b02 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000af2:	7dbb      	ldrb	r3, [r7, #22]
 8000af4:	3301      	adds	r3, #1
 8000af6:	75bb      	strb	r3, [r7, #22]
 8000af8:	7dba      	ldrb	r2, [r7, #22]
 8000afa:	7d7b      	ldrb	r3, [r7, #21]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d3cd      	bcc.n	8000a9c <HAL_FLASH_Program+0x60>
 8000b00:	e000      	b.n	8000b04 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000b02:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <HAL_FLASH_Program+0xd8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	761a      	strb	r2, [r3, #24]

  return status;
 8000b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b14:	20000088 	.word	0x20000088
 8000b18:	40022000 	.word	0x40022000

08000b1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <HAL_FLASH_Unlock+0x40>)
 8000b28:	691b      	ldr	r3, [r3, #16]
 8000b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00d      	beq.n	8000b4e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_FLASH_Unlock+0x40>)
 8000b34:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_FLASH_Unlock+0x44>)
 8000b36:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_FLASH_Unlock+0x40>)
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_FLASH_Unlock+0x48>)
 8000b3c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <HAL_FLASH_Unlock+0x40>)
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40022000 	.word	0x40022000
 8000b60:	45670123 	.word	0x45670123
 8000b64:	cdef89ab 	.word	0xcdef89ab

08000b68 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <HAL_FLASH_Lock+0x1c>)
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_FLASH_Lock+0x1c>)
 8000b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b76:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000

08000b88 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <FLASH_Program_HalfWord+0x30>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <FLASH_Program_HalfWord+0x34>)
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <FLASH_Program_HalfWord+0x34>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	887a      	ldrh	r2, [r7, #2]
 8000baa:	801a      	strh	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000088 	.word	0x20000088
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff fdc4 	bl	8000754 <HAL_GetTick>
 8000bcc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000bce:	e010      	b.n	8000bf2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd6:	d00c      	beq.n	8000bf2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d007      	beq.n	8000bee <FLASH_WaitForLastOperation+0x2e>
 8000bde:	f7ff fdb9 	bl	8000754 <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d201      	bcs.n	8000bf2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e025      	b.n	8000c3e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <FLASH_WaitForLastOperation+0x88>)
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1e8      	bne.n	8000bd0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <FLASH_WaitForLastOperation+0x88>)
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	f003 0320 	and.w	r3, r3, #32
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <FLASH_WaitForLastOperation+0x88>)
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c10:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <FLASH_WaitForLastOperation+0x88>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10b      	bne.n	8000c34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <FLASH_WaitForLastOperation+0x88>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d105      	bne.n	8000c34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <FLASH_WaitForLastOperation+0x88>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000c34:	f000 f80a 	bl	8000c4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40022000 	.word	0x40022000

08000c4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000c56:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <FLASH_SetErrorCode+0x98>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d009      	beq.n	8000c76 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <FLASH_SetErrorCode+0x9c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce8 <FLASH_SetErrorCode+0x9c>)
 8000c6c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <FLASH_SetErrorCode+0x98>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d009      	beq.n	8000c96 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <FLASH_SetErrorCode+0x9c>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ce8 <FLASH_SetErrorCode+0x9c>)
 8000c8c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <FLASH_SetErrorCode+0x98>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <FLASH_SetErrorCode+0x9c>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <FLASH_SetErrorCode+0x9c>)
 8000cac:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <FLASH_SetErrorCode+0x98>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce4 <FLASH_SetErrorCode+0x98>)
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f240 1201 	movw	r2, #257	@ 0x101
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d106      	bne.n	8000cd2 <FLASH_SetErrorCode+0x86>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <FLASH_SetErrorCode+0x98>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <FLASH_SetErrorCode+0x98>)
 8000cca:	f023 0301 	bic.w	r3, r3, #1
 8000cce:	61d3      	str	r3, [r2, #28]
}  
 8000cd0:	e002      	b.n	8000cd8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000cd2:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <FLASH_SetErrorCode+0x98>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	60d3      	str	r3, [r2, #12]
}  
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40022000 	.word	0x40022000
 8000ce8:	20000088 	.word	0x20000088

08000cec <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <FLASH_PageErase+0x38>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <FLASH_PageErase+0x3c>)
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <FLASH_PageErase+0x3c>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000d06:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <FLASH_PageErase+0x3c>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <FLASH_PageErase+0x3c>)
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <FLASH_PageErase+0x3c>)
 8000d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d16:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000088 	.word	0x20000088
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b08b      	sub	sp, #44	@ 0x2c
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	e169      	b.n	8001014 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d40:	2201      	movs	r2, #1
 8000d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	69fa      	ldr	r2, [r7, #28]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 8158 	bne.w	800100e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a9a      	ldr	r2, [pc, #616]	@ (8000fcc <HAL_GPIO_Init+0x2a0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d05e      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
 8000d68:	4a98      	ldr	r2, [pc, #608]	@ (8000fcc <HAL_GPIO_Init+0x2a0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d875      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000d6e:	4a98      	ldr	r2, [pc, #608]	@ (8000fd0 <HAL_GPIO_Init+0x2a4>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d058      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
 8000d74:	4a96      	ldr	r2, [pc, #600]	@ (8000fd0 <HAL_GPIO_Init+0x2a4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d86f      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000d7a:	4a96      	ldr	r2, [pc, #600]	@ (8000fd4 <HAL_GPIO_Init+0x2a8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d052      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
 8000d80:	4a94      	ldr	r2, [pc, #592]	@ (8000fd4 <HAL_GPIO_Init+0x2a8>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d869      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000d86:	4a94      	ldr	r2, [pc, #592]	@ (8000fd8 <HAL_GPIO_Init+0x2ac>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d04c      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
 8000d8c:	4a92      	ldr	r2, [pc, #584]	@ (8000fd8 <HAL_GPIO_Init+0x2ac>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d863      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000d92:	4a92      	ldr	r2, [pc, #584]	@ (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d046      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
 8000d98:	4a90      	ldr	r2, [pc, #576]	@ (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d85d      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000d9e:	2b12      	cmp	r3, #18
 8000da0:	d82a      	bhi.n	8000df8 <HAL_GPIO_Init+0xcc>
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d859      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000da6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dac <HAL_GPIO_Init+0x80>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000e27 	.word	0x08000e27
 8000db0:	08000e01 	.word	0x08000e01
 8000db4:	08000e13 	.word	0x08000e13
 8000db8:	08000e55 	.word	0x08000e55
 8000dbc:	08000e5b 	.word	0x08000e5b
 8000dc0:	08000e5b 	.word	0x08000e5b
 8000dc4:	08000e5b 	.word	0x08000e5b
 8000dc8:	08000e5b 	.word	0x08000e5b
 8000dcc:	08000e5b 	.word	0x08000e5b
 8000dd0:	08000e5b 	.word	0x08000e5b
 8000dd4:	08000e5b 	.word	0x08000e5b
 8000dd8:	08000e5b 	.word	0x08000e5b
 8000ddc:	08000e5b 	.word	0x08000e5b
 8000de0:	08000e5b 	.word	0x08000e5b
 8000de4:	08000e5b 	.word	0x08000e5b
 8000de8:	08000e5b 	.word	0x08000e5b
 8000dec:	08000e5b 	.word	0x08000e5b
 8000df0:	08000e09 	.word	0x08000e09
 8000df4:	08000e1d 	.word	0x08000e1d
 8000df8:	4a79      	ldr	r2, [pc, #484]	@ (8000fe0 <HAL_GPIO_Init+0x2b4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dfe:	e02c      	b.n	8000e5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	623b      	str	r3, [r7, #32]
          break;
 8000e06:	e029      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	623b      	str	r3, [r7, #32]
          break;
 8000e10:	e024      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	3308      	adds	r3, #8
 8000e18:	623b      	str	r3, [r7, #32]
          break;
 8000e1a:	e01f      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	330c      	adds	r3, #12
 8000e22:	623b      	str	r3, [r7, #32]
          break;
 8000e24:	e01a      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	623b      	str	r3, [r7, #32]
          break;
 8000e32:	e013      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d105      	bne.n	8000e48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	611a      	str	r2, [r3, #16]
          break;
 8000e46:	e009      	b.n	8000e5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	615a      	str	r2, [r3, #20]
          break;
 8000e52:	e003      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
          break;
 8000e58:	e000      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          break;
 8000e5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	2bff      	cmp	r3, #255	@ 0xff
 8000e60:	d801      	bhi.n	8000e66 <HAL_GPIO_Init+0x13a>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	e001      	b.n	8000e6a <HAL_GPIO_Init+0x13e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2bff      	cmp	r3, #255	@ 0xff
 8000e70:	d802      	bhi.n	8000e78 <HAL_GPIO_Init+0x14c>
 8000e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	e002      	b.n	8000e7e <HAL_GPIO_Init+0x152>
 8000e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7a:	3b08      	subs	r3, #8
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	210f      	movs	r1, #15
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	401a      	ands	r2, r3
 8000e90:	6a39      	ldr	r1, [r7, #32]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80b1 	beq.w	800100e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eac:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe4 <HAL_GPIO_Init+0x2b8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe4 <HAL_GPIO_Init+0x2b8>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe4 <HAL_GPIO_Init+0x2b8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ec4:	4a48      	ldr	r2, [pc, #288]	@ (8000fe8 <HAL_GPIO_Init+0x2bc>)
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a40      	ldr	r2, [pc, #256]	@ (8000fec <HAL_GPIO_Init+0x2c0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d013      	beq.n	8000f18 <HAL_GPIO_Init+0x1ec>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ff0 <HAL_GPIO_Init+0x2c4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d00d      	beq.n	8000f14 <HAL_GPIO_Init+0x1e8>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff4 <HAL_GPIO_Init+0x2c8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d007      	beq.n	8000f10 <HAL_GPIO_Init+0x1e4>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3d      	ldr	r2, [pc, #244]	@ (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d101      	bne.n	8000f0c <HAL_GPIO_Init+0x1e0>
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e006      	b.n	8000f1a <HAL_GPIO_Init+0x1ee>
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	e004      	b.n	8000f1a <HAL_GPIO_Init+0x1ee>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e002      	b.n	8000f1a <HAL_GPIO_Init+0x1ee>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <HAL_GPIO_Init+0x1ee>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f1c:	f002 0203 	and.w	r2, r2, #3
 8000f20:	0092      	lsls	r2, r2, #2
 8000f22:	4093      	lsls	r3, r2
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f2a:	492f      	ldr	r1, [pc, #188]	@ (8000fe8 <HAL_GPIO_Init+0x2bc>)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f44:	4b2d      	ldr	r3, [pc, #180]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	492c      	ldr	r1, [pc, #176]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	608b      	str	r3, [r1, #8]
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f52:	4b2a      	ldr	r3, [pc, #168]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	4928      	ldr	r1, [pc, #160]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f6c:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	4922      	ldr	r1, [pc, #136]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	60cb      	str	r3, [r1, #12]
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	491e      	ldr	r1, [pc, #120]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d006      	beq.n	8000fa2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4918      	ldr	r1, [pc, #96]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	4914      	ldr	r1, [pc, #80]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000fac:	4013      	ands	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d021      	beq.n	8001000 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	490e      	ldr	r1, [pc, #56]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	600b      	str	r3, [r1, #0]
 8000fc8:	e021      	b.n	800100e <HAL_GPIO_Init+0x2e2>
 8000fca:	bf00      	nop
 8000fcc:	10320000 	.word	0x10320000
 8000fd0:	10310000 	.word	0x10310000
 8000fd4:	10220000 	.word	0x10220000
 8000fd8:	10210000 	.word	0x10210000
 8000fdc:	10120000 	.word	0x10120000
 8000fe0:	10110000 	.word	0x10110000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40011400 	.word	0x40011400
 8000ffc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_GPIO_Init+0x304>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	43db      	mvns	r3, r3
 8001008:	4909      	ldr	r1, [pc, #36]	@ (8001030 <HAL_GPIO_Init+0x304>)
 800100a:	4013      	ands	r3, r2
 800100c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001010:	3301      	adds	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101a:	fa22 f303 	lsr.w	r3, r2, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	f47f ae8e 	bne.w	8000d40 <HAL_GPIO_Init+0x14>
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	372c      	adds	r7, #44	@ 0x2c
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001050:	e003      	b.n	800105a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	041a      	lsls	r2, r3, #16
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	611a      	str	r2, [r3, #16]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001076:	2b80      	cmp	r3, #128	@ 0x80
 8001078:	d103      	bne.n	8001082 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80010ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b10      	cmp	r3, #16
 80010ba:	d003      	beq.n	80010c4 <HAL_I2C_EV_IRQHandler+0x38>
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b40      	cmp	r3, #64	@ 0x40
 80010c0:	f040 80b1 	bne.w	8001226 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10d      	bne.n	80010fa <HAL_I2C_EV_IRQHandler+0x6e>
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80010e4:	d003      	beq.n	80010ee <HAL_I2C_EV_IRQHandler+0x62>
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80010ec:	d101      	bne.n	80010f2 <HAL_I2C_EV_IRQHandler+0x66>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_I2C_EV_IRQHandler+0x68>
 80010f2:	2300      	movs	r3, #0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	f000 8114 	beq.w	8001322 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <HAL_I2C_EV_IRQHandler+0x90>
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f001 fc60 	bl	80029d4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 fd60 	bl	8001bda <I2C_Master_SB>
 800111a:	e083      	b.n	8001224 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d008      	beq.n	8001138 <HAL_I2C_EV_IRQHandler+0xac>
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fdd7 	bl	8001ce4 <I2C_Master_ADD10>
 8001136:	e075      	b.n	8001224 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d008      	beq.n	8001154 <HAL_I2C_EV_IRQHandler+0xc8>
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 fdf2 	bl	8001d36 <I2C_Master_ADDR>
 8001152:	e067      	b.n	8001224 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b00      	cmp	r3, #0
 800115c:	d036      	beq.n	80011cc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800116c:	f000 80db 	beq.w	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00d      	beq.n	8001196 <HAL_I2C_EV_IRQHandler+0x10a>
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_I2C_EV_IRQHandler+0x10a>
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f9d4 	bl	800153c <I2C_MasterTransmit_TXE>
 8001194:	e046      	b.n	8001224 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80c2 	beq.w	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80bc 	beq.w	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	2b21      	cmp	r3, #33	@ 0x21
 80011b2:	d103      	bne.n	80011bc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fa5d 	bl	8001674 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011ba:	e0b4      	b.n	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b40      	cmp	r3, #64	@ 0x40
 80011c0:	f040 80b1 	bne.w	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 facb 	bl	8001760 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011ca:	e0ac      	b.n	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011da:	f000 80a4 	beq.w	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00d      	beq.n	8001204 <HAL_I2C_EV_IRQHandler+0x178>
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d008      	beq.n	8001204 <HAL_I2C_EV_IRQHandler+0x178>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 fb47 	bl	8001890 <I2C_MasterReceive_RXNE>
 8001202:	e00f      	b.n	8001224 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 808b 	beq.w	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8085 	beq.w	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 fbf2 	bl	8001a06 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001222:	e080      	b.n	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
 8001224:	e07f      	b.n	8001326 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	e007      	b.n	8001248 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d011      	beq.n	8001276 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800126c:	69b9      	ldr	r1, [r7, #24]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 ffb8 	bl	80021e4 <I2C_Slave_ADDR>
 8001274:	e05a      	b.n	800132c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <HAL_I2C_EV_IRQHandler+0x206>
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fff2 	bl	8002274 <I2C_Slave_STOPF>
 8001290:	e04c      	b.n	800132c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	2b21      	cmp	r3, #33	@ 0x21
 8001296:	d002      	beq.n	800129e <HAL_I2C_EV_IRQHandler+0x212>
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	2b29      	cmp	r3, #41	@ 0x29
 800129c:	d120      	bne.n	80012e0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00d      	beq.n	80012c4 <HAL_I2C_EV_IRQHandler+0x238>
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d008      	beq.n	80012c4 <HAL_I2C_EV_IRQHandler+0x238>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fed5 	bl	800206c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80012c2:	e032      	b.n	800132a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d02d      	beq.n	800132a <HAL_I2C_EV_IRQHandler+0x29e>
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d028      	beq.n	800132a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 ff04 	bl	80020e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80012de:	e024      	b.n	800132a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00d      	beq.n	8001306 <HAL_I2C_EV_IRQHandler+0x27a>
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_I2C_EV_IRQHandler+0x27a>
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d103      	bne.n	8001306 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 ff11 	bl	8002126 <I2C_SlaveReceive_RXNE>
 8001304:	e012      	b.n	800132c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00d      	beq.n	800132c <HAL_I2C_EV_IRQHandler+0x2a0>
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001316:	2b00      	cmp	r3, #0
 8001318:	d008      	beq.n	800132c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 ff41 	bl	80021a2 <I2C_SlaveReceive_BTF>
 8001320:	e004      	b.n	800132c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001322:	bf00      	nop
 8001324:	e002      	b.n	800132c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001326:	bf00      	nop
 8001328:	e000      	b.n	800132c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800132a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b08a      	sub	sp, #40	@ 0x28
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001354:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135c:	2b00      	cmp	r3, #0
 800135e:	d015      	beq.n	800138c <HAL_I2C_ER_IRQHandler+0x5a>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d010      	beq.n	800138c <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800137a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800138a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00d      	beq.n	80013b2 <HAL_I2C_ER_IRQHandler+0x80>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80013b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d03e      	beq.n	800143a <HAL_I2C_ER_IRQHandler+0x108>
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d039      	beq.n	800143a <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80013c6:	7efb      	ldrb	r3, [r7, #27]
 80013c8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013d8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80013e0:	7ebb      	ldrb	r3, [r7, #26]
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d112      	bne.n	800140c <HAL_I2C_ER_IRQHandler+0xda>
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10f      	bne.n	800140c <HAL_I2C_ER_IRQHandler+0xda>
 80013ec:	7cfb      	ldrb	r3, [r7, #19]
 80013ee:	2b21      	cmp	r3, #33	@ 0x21
 80013f0:	d008      	beq.n	8001404 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	2b29      	cmp	r3, #41	@ 0x29
 80013f6:	d005      	beq.n	8001404 <HAL_I2C_ER_IRQHandler+0xd2>
 80013f8:	7cfb      	ldrb	r3, [r7, #19]
 80013fa:	2b28      	cmp	r3, #40	@ 0x28
 80013fc:	d106      	bne.n	800140c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b21      	cmp	r3, #33	@ 0x21
 8001402:	d103      	bne.n	800140c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f001 f865 	bl	80024d4 <I2C_Slave_AF>
 800140a:	e016      	b.n	800143a <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001414:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800141e:	7efb      	ldrb	r3, [r7, #27]
 8001420:	2b10      	cmp	r3, #16
 8001422:	d002      	beq.n	800142a <HAL_I2C_ER_IRQHandler+0xf8>
 8001424:	7efb      	ldrb	r3, [r7, #27]
 8001426:	2b40      	cmp	r3, #64	@ 0x40
 8001428:	d107      	bne.n	800143a <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001438:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00d      	beq.n	8001460 <HAL_I2C_ER_IRQHandler+0x12e>
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d008      	beq.n	8001460 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800145e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	2b00      	cmp	r3, #0
 8001464:	d008      	beq.n	8001478 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f001 f8a2 	bl	80025bc <I2C_ITError>
  }
}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	@ 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
 80014d4:	4613      	mov	r3, r2
 80014d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800154a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001552:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001558:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800155e:	2b00      	cmp	r3, #0
 8001560:	d150      	bne.n	8001604 <I2C_MasterTransmit_TXE+0xc8>
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b21      	cmp	r3, #33	@ 0x21
 8001566:	d14d      	bne.n	8001604 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d01d      	beq.n	80015aa <I2C_MasterTransmit_TXE+0x6e>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b20      	cmp	r3, #32
 8001572:	d01a      	beq.n	80015aa <I2C_MasterTransmit_TXE+0x6e>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800157a:	d016      	beq.n	80015aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800158a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2211      	movs	r2, #17
 8001590:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff6c 	bl	8001480 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80015a8:	e060      	b.n	800166c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80015b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2220      	movs	r2, #32
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b40      	cmp	r3, #64	@ 0x40
 80015e2:	d107      	bne.n	80015f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff81 	bl	80014f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80015f2:	e03b      	b.n	800166c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff3f 	bl	8001480 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001602:	e033      	b.n	800166c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	2b21      	cmp	r3, #33	@ 0x21
 8001608:	d005      	beq.n	8001616 <I2C_MasterTransmit_TXE+0xda>
 800160a:	7bbb      	ldrb	r3, [r7, #14]
 800160c:	2b40      	cmp	r3, #64	@ 0x40
 800160e:	d12d      	bne.n	800166c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b22      	cmp	r3, #34	@ 0x22
 8001614:	d12a      	bne.n	800166c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800161a:	b29b      	uxth	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800162e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001630:	e01c      	b.n	800166c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b40      	cmp	r3, #64	@ 0x40
 800163c:	d103      	bne.n	8001646 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f88e 	bl	8001760 <I2C_MemoryTransmit_TXE_BTF>
}
 8001644:	e012      	b.n	800166c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001660:	b29b      	uxth	r3, r3
 8001662:	3b01      	subs	r3, #1
 8001664:	b29a      	uxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800166a:	e7ff      	b.n	800166c <I2C_MasterTransmit_TXE+0x130>
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001680:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b21      	cmp	r3, #33	@ 0x21
 800168c:	d164      	bne.n	8001758 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001692:	b29b      	uxth	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d012      	beq.n	80016be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80016bc:	e04c      	b.n	8001758 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d01d      	beq.n	8001700 <I2C_MasterTransmit_BTF+0x8c>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	d01a      	beq.n	8001700 <I2C_MasterTransmit_BTF+0x8c>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80016d0:	d016      	beq.n	8001700 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80016e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2211      	movs	r2, #17
 80016e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fec1 	bl	8001480 <HAL_I2C_MasterTxCpltCallback>
}
 80016fe:	e02b      	b.n	8001758 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800170e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800171e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2220      	movs	r2, #32
 800172a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b40      	cmp	r3, #64	@ 0x40
 8001738:	d107      	bne.n	800174a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fed6 	bl	80014f4 <HAL_I2C_MemTxCpltCallback>
}
 8001748:	e006      	b.n	8001758 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fe94 	bl	8001480 <HAL_I2C_MasterTxCpltCallback>
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800176e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001774:	2b00      	cmp	r3, #0
 8001776:	d11d      	bne.n	80017b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177c:	2b01      	cmp	r3, #1
 800177e:	d10b      	bne.n	8001798 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001790:	1c9a      	adds	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001796:	e077      	b.n	8001888 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800179c:	b29b      	uxth	r3, r3
 800179e:	121b      	asrs	r3, r3, #8
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80017b2:	e069      	b.n	8001888 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d10b      	bne.n	80017d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80017d2:	e059      	b.n	8001888 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d152      	bne.n	8001882 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	2b22      	cmp	r3, #34	@ 0x22
 80017e0:	d10d      	bne.n	80017fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80017fc:	e044      	b.n	8001888 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001802:	b29b      	uxth	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d015      	beq.n	8001834 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b21      	cmp	r3, #33	@ 0x21
 800180c:	d112      	bne.n	8001834 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001828:	b29b      	uxth	r3, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001832:	e029      	b.n	8001888 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d124      	bne.n	8001888 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	2b21      	cmp	r3, #33	@ 0x21
 8001842:	d121      	bne.n	8001888 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001852:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001862:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fe3a 	bl	80014f4 <HAL_I2C_MemTxCpltCallback>
}
 8001880:	e002      	b.n	8001888 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fbee 	bl	8001064 <I2C_Flush_DR>
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b22      	cmp	r3, #34	@ 0x22
 80018a2:	f040 80ac 	bne.w	80019fe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d921      	bls.n	80018f8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018de:	b29b      	uxth	r3, r3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	f040 808c 	bne.w	80019fe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018f4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80018f6:	e082      	b.n	80019fe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d075      	beq.n	80019ec <I2C_MasterReceive_RXNE+0x15c>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d002      	beq.n	800190c <I2C_MasterReceive_RXNE+0x7c>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d16f      	bne.n	80019ec <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f001 f82f 	bl	8002970 <I2C_WaitOnSTOPRequestThroughIT>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d142      	bne.n	800199e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001926:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001936:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b40      	cmp	r3, #64	@ 0x40
 8001970:	d10a      	bne.n	8001988 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fdc0 	bl	8001506 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001986:	e03a      	b.n	80019fe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2212      	movs	r2, #18
 8001994:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fd7b 	bl	8001492 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800199c:	e02f      	b.n	80019fe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fd97 	bl	8001518 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80019ea:	e008      	b.n	80019fe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019fa:	605a      	str	r2, [r3, #4]
}
 80019fc:	e7ff      	b.n	80019fe <I2C_MasterReceive_RXNE+0x16e>
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a12:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d11b      	bne.n	8001a56 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a2c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001a54:	e0bd      	b.n	8001bd2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d129      	bne.n	8001ab4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a6e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d00a      	beq.n	8001a8c <I2C_MasterReceive_BTF+0x86>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d007      	beq.n	8001a8c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ab2:	e08e      	b.n	8001bd2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d176      	bne.n	8001bac <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d002      	beq.n	8001aca <I2C_MasterReceive_BTF+0xc4>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b10      	cmp	r3, #16
 8001ac8:	d108      	bne.n	8001adc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e019      	b.n	8001b10 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d002      	beq.n	8001ae8 <I2C_MasterReceive_BTF+0xe2>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d108      	bne.n	8001afa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e00a      	b.n	8001b10 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d007      	beq.n	8001b10 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001b6a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b40      	cmp	r3, #64	@ 0x40
 8001b7e:	d10a      	bne.n	8001b96 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fcb9 	bl	8001506 <HAL_I2C_MemRxCpltCallback>
}
 8001b94:	e01d      	b.n	8001bd2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2212      	movs	r2, #18
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff fc74 	bl	8001492 <HAL_I2C_MasterRxCpltCallback>
}
 8001baa:	e012      	b.n	8001bd2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b40      	cmp	r3, #64	@ 0x40
 8001bec:	d117      	bne.n	8001c1e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c06:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001c08:	e067      	b.n	8001cda <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	611a      	str	r2, [r3, #16]
}
 8001c1c:	e05d      	b.n	8001cda <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c26:	d133      	bne.n	8001c90 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b21      	cmp	r3, #33	@ 0x21
 8001c32:	d109      	bne.n	8001c48 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c44:	611a      	str	r2, [r3, #16]
 8001c46:	e008      	b.n	8001c5a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d004      	beq.n	8001c6c <I2C_Master_SB+0x92>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d108      	bne.n	8001c7e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d032      	beq.n	8001cda <I2C_Master_SB+0x100>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d02d      	beq.n	8001cda <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c8c:	605a      	str	r2, [r3, #4]
}
 8001c8e:	e024      	b.n	8001cda <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10e      	bne.n	8001cb6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	11db      	asrs	r3, r3, #7
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f003 0306 	and.w	r3, r3, #6
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f063 030f 	orn	r3, r3, #15
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	611a      	str	r2, [r3, #16]
}
 8001cb4:	e011      	b.n	8001cda <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10d      	bne.n	8001cda <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	11db      	asrs	r3, r3, #7
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f003 0306 	and.w	r3, r3, #6
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f063 030e 	orn	r3, r3, #14
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	611a      	str	r2, [r3, #16]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <I2C_Master_ADD10+0x26>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d108      	bne.n	8001d1c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00c      	beq.n	8001d2c <I2C_Master_ADD10+0x48>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d2a:	605a      	str	r2, [r3, #4]
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b091      	sub	sp, #68	@ 0x44
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b22      	cmp	r3, #34	@ 0x22
 8001d5e:	f040 8174 	bne.w	800204a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <I2C_Master_ADDR+0x54>
 8001d6a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001d6e:	2b40      	cmp	r3, #64	@ 0x40
 8001d70:	d10b      	bne.n	8001d8a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d72:	2300      	movs	r3, #0
 8001d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d88:	e16b      	b.n	8002062 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d11d      	bne.n	8001dce <I2C_Master_ADDR+0x98>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001d9a:	d118      	bne.n	8001dce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dcc:	e149      	b.n	8002062 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d113      	bne.n	8001e00 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e120      	b.n	8002042 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	f040 808a 	bne.w	8001f20 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e12:	d137      	bne.n	8001e84 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e22:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e32:	d113      	bne.n	8001e5c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e42:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	e0f2      	b.n	8002042 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e0de      	b.n	8002042 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d02e      	beq.n	8001ee8 <I2C_Master_ADDR+0x1b2>
 8001e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d02b      	beq.n	8001ee8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e92:	2b12      	cmp	r3, #18
 8001e94:	d102      	bne.n	8001e9c <I2C_Master_ADDR+0x166>
 8001e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d125      	bne.n	8001ee8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d00e      	beq.n	8001ec0 <I2C_Master_ADDR+0x18a>
 8001ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d00b      	beq.n	8001ec0 <I2C_Master_ADDR+0x18a>
 8001ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d008      	beq.n	8001ec0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ece:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	e0ac      	b.n	8002042 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ef6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	e090      	b.n	8002042 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d158      	bne.n	8001fdc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d021      	beq.n	8001f74 <I2C_Master_ADDR+0x23e>
 8001f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d01e      	beq.n	8001f74 <I2C_Master_ADDR+0x23e>
 8001f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d01b      	beq.n	8001f74 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f4a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e012      	b.n	8001f9a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f82:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fa8:	d14b      	bne.n	8002042 <I2C_Master_ADDR+0x30c>
 8001faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fb0:	d00b      	beq.n	8001fca <I2C_Master_ADDR+0x294>
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d008      	beq.n	8001fca <I2C_Master_ADDR+0x294>
 8001fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d005      	beq.n	8001fca <I2C_Master_ADDR+0x294>
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d002      	beq.n	8001fca <I2C_Master_ADDR+0x294>
 8001fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d13b      	bne.n	8002042 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	e032      	b.n	8002042 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001fea:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ffa:	d117      	bne.n	800202c <I2C_Master_ADDR+0x2f6>
 8001ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002002:	d00b      	beq.n	800201c <I2C_Master_ADDR+0x2e6>
 8002004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002006:	2b01      	cmp	r3, #1
 8002008:	d008      	beq.n	800201c <I2C_Master_ADDR+0x2e6>
 800200a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800200c:	2b08      	cmp	r3, #8
 800200e:	d005      	beq.n	800201c <I2C_Master_ADDR+0x2e6>
 8002010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002012:	2b10      	cmp	r3, #16
 8002014:	d002      	beq.n	800201c <I2C_Master_ADDR+0x2e6>
 8002016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002018:	2b20      	cmp	r3, #32
 800201a:	d107      	bne.n	800202c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800202a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002048:	e00b      	b.n	8002062 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
}
 8002060:	e7ff      	b.n	8002062 <I2C_Master_ADDR+0x32c>
 8002062:	bf00      	nop
 8002064:	3744      	adds	r7, #68	@ 0x44
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800207a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d02b      	beq.n	80020de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d114      	bne.n	80020de <I2C_SlaveTransmit_TXE+0x72>
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b29      	cmp	r3, #41	@ 0x29
 80020b8:	d111      	bne.n	80020de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2221      	movs	r2, #33	@ 0x21
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2228      	movs	r2, #40	@ 0x28
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff f9e3 	bl	80014a4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d011      	beq.n	800211c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002134:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d02c      	beq.n	800219a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d114      	bne.n	800219a <I2C_SlaveReceive_RXNE+0x74>
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	2b2a      	cmp	r3, #42	@ 0x2a
 8002174:	d111      	bne.n	800219a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002184:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2222      	movs	r2, #34	@ 0x22
 800218a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2228      	movs	r2, #40	@ 0x28
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff f98e 	bl	80014b6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d012      	beq.n	80021da <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021fe:	2b28      	cmp	r3, #40	@ 0x28
 8002200:	d125      	bne.n	800224e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002210:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	81bb      	strh	r3, [r7, #12]
 8002230:	e002      	b.n	8002238 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002240:	89ba      	ldrh	r2, [r7, #12]
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	4619      	mov	r1, r3
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff f93e 	bl	80014c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800224c:	e00e      	b.n	800226c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002282:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002292:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022d0:	d172      	bne.n	80023b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b22      	cmp	r3, #34	@ 0x22
 80022d6:	d002      	beq.n	80022de <I2C_Slave_STOPF+0x6a>
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b2a      	cmp	r3, #42	@ 0x2a
 80022dc:	d135      	bne.n	800234a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f043 0204 	orr.w	r2, r3, #4
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002310:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fb82 	bl	8000a20 <HAL_DMA_GetState>
 800231c:	4603      	mov	r3, r0
 800231e:	2b01      	cmp	r3, #1
 8002320:	d049      	beq.n	80023b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	4a69      	ldr	r2, [pc, #420]	@ (80024cc <I2C_Slave_STOPF+0x258>)
 8002328:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fafe 	bl	8000930 <HAL_DMA_Abort_IT>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03d      	beq.n	80023b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002344:	4610      	mov	r0, r2
 8002346:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002348:	e035      	b.n	80023b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	b29a      	uxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f043 0204 	orr.w	r2, r3, #4
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800237c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fb4c 	bl	8000a20 <HAL_DMA_GetState>
 8002388:	4603      	mov	r3, r0
 800238a:	2b01      	cmp	r3, #1
 800238c:	d014      	beq.n	80023b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002392:	4a4e      	ldr	r2, [pc, #312]	@ (80024cc <I2C_Slave_STOPF+0x258>)
 8002394:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fac8 	bl	8000930 <HAL_DMA_Abort_IT>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023b0:	4610      	mov	r0, r2
 80023b2:	4798      	blx	r3
 80023b4:	e000      	b.n	80023b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80023b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d03e      	beq.n	8002440 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d112      	bne.n	80023f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002400:	2b40      	cmp	r3, #64	@ 0x40
 8002402:	d112      	bne.n	800242a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	f043 0204 	orr.w	r2, r3, #4
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f8b7 	bl	80025bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800244e:	e039      	b.n	80024c4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b2a      	cmp	r3, #42	@ 0x2a
 8002454:	d109      	bne.n	800246a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2228      	movs	r2, #40	@ 0x28
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff f826 	bl	80014b6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b28      	cmp	r3, #40	@ 0x28
 8002474:	d111      	bne.n	800249a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a15      	ldr	r2, [pc, #84]	@ (80024d0 <I2C_Slave_STOPF+0x25c>)
 800247a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff f825 	bl	80014e2 <HAL_I2C_ListenCpltCallback>
}
 8002498:	e014      	b.n	80024c4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	2b22      	cmp	r3, #34	@ 0x22
 80024a0:	d002      	beq.n	80024a8 <I2C_Slave_STOPF+0x234>
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b22      	cmp	r3, #34	@ 0x22
 80024a6:	d10d      	bne.n	80024c4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fff9 	bl	80014b6 <HAL_I2C_SlaveRxCpltCallback>
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	08002821 	.word	0x08002821
 80024d0:	ffff0000 	.word	0xffff0000

080024d4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d002      	beq.n	80024f6 <I2C_Slave_AF+0x22>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d129      	bne.n	800254a <I2C_Slave_AF+0x76>
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b28      	cmp	r3, #40	@ 0x28
 80024fa:	d126      	bne.n	800254a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a2e      	ldr	r2, [pc, #184]	@ (80025b8 <I2C_Slave_AF+0xe4>)
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002510:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800251a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800252a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe ffcd 	bl	80014e2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002548:	e031      	b.n	80025ae <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b21      	cmp	r3, #33	@ 0x21
 800254e:	d129      	bne.n	80025a4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a19      	ldr	r2, [pc, #100]	@ (80025b8 <I2C_Slave_AF+0xe4>)
 8002554:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2221      	movs	r2, #33	@ 0x21
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800257a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002584:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002594:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fd64 	bl	8001064 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7fe ff81 	bl	80014a4 <HAL_I2C_SlaveTxCpltCallback>
}
 80025a2:	e004      	b.n	80025ae <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025ac:	615a      	str	r2, [r3, #20]
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	ffff0000 	.word	0xffff0000

080025bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d002      	beq.n	80025e0 <I2C_ITError+0x24>
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	2b40      	cmp	r3, #64	@ 0x40
 80025de:	d10a      	bne.n	80025f6 <I2C_ITError+0x3a>
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b22      	cmp	r3, #34	@ 0x22
 80025e4:	d107      	bne.n	80025f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80025fc:	2b28      	cmp	r3, #40	@ 0x28
 80025fe:	d107      	bne.n	8002610 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2228      	movs	r2, #40	@ 0x28
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800260e:	e015      	b.n	800263c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800261a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800261e:	d00a      	beq.n	8002636 <I2C_ITError+0x7a>
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b60      	cmp	r3, #96	@ 0x60
 8002624:	d007      	beq.n	8002636 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002646:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800264a:	d162      	bne.n	8002712 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800265a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002660:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d020      	beq.n	80026ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800266e:	4a6a      	ldr	r2, [pc, #424]	@ (8002818 <I2C_ITError+0x25c>)
 8002670:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe f95a 	bl	8000930 <HAL_DMA_Abort_IT>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8089 	beq.w	8002796 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026a6:	4610      	mov	r0, r2
 80026a8:	4798      	blx	r3
 80026aa:	e074      	b.n	8002796 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b0:	4a59      	ldr	r2, [pc, #356]	@ (8002818 <I2C_ITError+0x25c>)
 80026b2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe f939 	bl	8000930 <HAL_DMA_Abort_IT>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d068      	beq.n	8002796 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ce:	2b40      	cmp	r3, #64	@ 0x40
 80026d0:	d10b      	bne.n	80026ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0201 	bic.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800270c:	4610      	mov	r0, r2
 800270e:	4798      	blx	r3
 8002710:	e041      	b.n	8002796 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b60      	cmp	r3, #96	@ 0x60
 800271c:	d125      	bne.n	800276a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002736:	2b40      	cmp	r3, #64	@ 0x40
 8002738:	d10b      	bne.n	8002752 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fee1 	bl	800152a <HAL_I2C_AbortCpltCallback>
 8002768:	e015      	b.n	8002796 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	d10b      	bne.n	8002790 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe fec1 	bl	8001518 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10e      	bne.n	80027c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d113      	bne.n	8002810 <I2C_ITError+0x254>
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b28      	cmp	r3, #40	@ 0x28
 80027ec:	d110      	bne.n	8002810 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <I2C_ITError+0x260>)
 80027f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fe69 	bl	80014e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	08002821 	.word	0x08002821
 800281c:	ffff0000 	.word	0xffff0000

08002820 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002838:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800283a:	4b4b      	ldr	r3, [pc, #300]	@ (8002968 <I2C_DMAAbort+0x148>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	08db      	lsrs	r3, r3, #3
 8002840:	4a4a      	ldr	r2, [pc, #296]	@ (800296c <I2C_DMAAbort+0x14c>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0a1a      	lsrs	r2, r3, #8
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00da      	lsls	r2, r3, #3
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002866:	e00a      	b.n	800287e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3b01      	subs	r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800287c:	d0ea      	beq.n	8002854 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288a:	2200      	movs	r2, #0
 800288c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	2200      	movs	r2, #0
 800289c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c0:	2200      	movs	r2, #0
 80028c2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d0:	2200      	movs	r2, #0
 80028d2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b60      	cmp	r3, #96	@ 0x60
 80028ee:	d10e      	bne.n	800290e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f7fe fe0f 	bl	800152a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800290c:	e027      	b.n	800295e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002914:	2b28      	cmp	r3, #40	@ 0x28
 8002916:	d117      	bne.n	8002948 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002936:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2228      	movs	r2, #40	@ 0x28
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002946:	e007      	b.n	8002958 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002958:	6978      	ldr	r0, [r7, #20]
 800295a:	f7fe fddd 	bl	8001518 <HAL_I2C_ErrorCallback>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000000 	.word	0x20000000
 800296c:	14f8b589 	.word	0x14f8b589

08002970 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800297c:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	08db      	lsrs	r3, r3, #3
 8002982:	4a13      	ldr	r2, [pc, #76]	@ (80029d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	0a1a      	lsrs	r2, r3, #8
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3b01      	subs	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d107      	bne.n	80029ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f043 0220 	orr.w	r2, r3, #32
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e008      	b.n	80029c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029bc:	d0e9      	beq.n	8002992 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000000 	.word	0x20000000
 80029d0:	14f8b589 	.word	0x14f8b589

080029d4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80029e4:	d103      	bne.n	80029ee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80029ec:	e007      	b.n	80029fe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80029f6:	d102      	bne.n	80029fe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2208      	movs	r2, #8
 80029fc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e272      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a28:	4b92      	ldr	r3, [pc, #584]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a34:	4b8f      	ldr	r3, [pc, #572]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5e>
 8002a40:	4b8c      	ldr	r3, [pc, #560]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a4c:	d10b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4e:	4b89      	ldr	r3, [pc, #548]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x12c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d168      	bne.n	8002b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e24c      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x76>
 8002a70:	4b80      	ldr	r3, [pc, #512]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a7f      	ldr	r2, [pc, #508]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x98>
 8002a86:	4b7b      	ldr	r3, [pc, #492]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7a      	ldr	r2, [pc, #488]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b78      	ldr	r3, [pc, #480]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a77      	ldr	r2, [pc, #476]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xbc>
 8002aaa:	4b72      	ldr	r3, [pc, #456]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a71      	ldr	r2, [pc, #452]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6e      	ldr	r2, [pc, #440]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6a      	ldr	r2, [pc, #424]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b68      	ldr	r3, [pc, #416]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a67      	ldr	r2, [pc, #412]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fd fe36 	bl	8000754 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fd fe32 	bl	8000754 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	@ 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e200      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b5d      	ldr	r3, [pc, #372]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xe4>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fd fe22 	bl	8000754 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fd fe1e 	bl	8000754 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	@ 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1ec      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b53      	ldr	r3, [pc, #332]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x10c>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4b4c      	ldr	r3, [pc, #304]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b4e:	4b49      	ldr	r3, [pc, #292]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x18c>
 8002b5a:	4b46      	ldr	r3, [pc, #280]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b43      	ldr	r3, [pc, #268]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1c0      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4939      	ldr	r1, [pc, #228]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e03a      	b.n	8002c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b36      	ldr	r3, [pc, #216]	@ (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fd fdd7 	bl	8000754 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7fd fdd3 	bl	8000754 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1a1      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4927      	ldr	r1, [pc, #156]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b26      	ldr	r3, [pc, #152]	@ (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fd fdb6 	bl	8000754 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bec:	f7fd fdb2 	bl	8000754 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e180      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d03a      	beq.n	8002c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d019      	beq.n	8002c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7fd fd96 	bl	8000754 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fd fd92 	bl	8000754 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e160      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f000 fa9c 	bl	8003188 <RCC_Delay>
 8002c50:	e01c      	b.n	8002c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7fd fd7c 	bl	8000754 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5e:	e00f      	b.n	8002c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c60:	f7fd fd78 	bl	8000754 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e146      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	42420000 	.word	0x42420000
 8002c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	4b92      	ldr	r3, [pc, #584]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e9      	bne.n	8002c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a6 	beq.w	8002de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b8b      	ldr	r3, [pc, #556]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4b88      	ldr	r3, [pc, #544]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4a87      	ldr	r2, [pc, #540]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb4:	61d3      	str	r3, [r2, #28]
 8002cb6:	4b85      	ldr	r3, [pc, #532]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b82      	ldr	r3, [pc, #520]	@ (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fd fd39 	bl	8000754 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fd fd35 	bl	8000754 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	@ 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e103      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b75      	ldr	r3, [pc, #468]	@ (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x312>
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a6e      	ldr	r2, [pc, #440]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	e02d      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x334>
 8002d22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a69      	ldr	r2, [pc, #420]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4b67      	ldr	r3, [pc, #412]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a66      	ldr	r2, [pc, #408]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x356>
 8002d44:	4b61      	ldr	r3, [pc, #388]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4a60      	ldr	r2, [pc, #384]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6213      	str	r3, [r2, #32]
 8002d50:	4b5e      	ldr	r3, [pc, #376]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4a5d      	ldr	r2, [pc, #372]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6213      	str	r3, [r2, #32]
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a5a      	ldr	r2, [pc, #360]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	4b58      	ldr	r3, [pc, #352]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a57      	ldr	r2, [pc, #348]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fd fce9 	bl	8000754 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fd fce5 	bl	8000754 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0b1      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RCC_OscConfig+0x37e>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fd fcd3 	bl	8000754 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fd fccf 	bl	8000754 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e09b      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	4b40      	ldr	r3, [pc, #256]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a3b      	ldr	r2, [pc, #236]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8087 	beq.w	8002efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df0:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d061      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d146      	bne.n	8002e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b33      	ldr	r3, [pc, #204]	@ (8002ed4 <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fd fca3 	bl	8000754 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fd fc9f 	bl	8000754 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e06d      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e24:	4b29      	ldr	r3, [pc, #164]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4921      	ldr	r1, [pc, #132]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a19      	ldr	r1, [r3, #32]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	491b      	ldr	r1, [pc, #108]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fd fc73 	bl	8000754 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fd fc6f 	bl	8000754 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e03d      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x46a>
 8002e90:	e035      	b.n	8002efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <HAL_RCC_OscConfig+0x4cc>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fd fc5c 	bl	8000754 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fd fc58 	bl	8000754 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e026      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x498>
 8002ebe:	e01e      	b.n	8002efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e019      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_RCC_OscConfig+0x500>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000

08002f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0d0      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b6a      	ldr	r3, [pc, #424]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d910      	bls.n	8002f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b67      	ldr	r3, [pc, #412]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 0207 	bic.w	r2, r3, #7
 8002f36:	4965      	ldr	r1, [pc, #404]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b63      	ldr	r3, [pc, #396]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0b8      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f68:	4b59      	ldr	r3, [pc, #356]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a58      	ldr	r2, [pc, #352]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f80:	4b53      	ldr	r3, [pc, #332]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a52      	ldr	r2, [pc, #328]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b50      	ldr	r3, [pc, #320]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	494d      	ldr	r1, [pc, #308]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d040      	beq.n	800302c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e07f      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b41      	ldr	r3, [pc, #260]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e073      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3d      	ldr	r3, [pc, #244]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06b      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b39      	ldr	r3, [pc, #228]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4936      	ldr	r1, [pc, #216]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ffc:	f7fd fbaa 	bl	8000754 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fd fba6 	bl	8000754 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e053      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2d      	ldr	r3, [pc, #180]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d210      	bcs.n	800305c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b24      	ldr	r3, [pc, #144]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 0207 	bic.w	r2, r3, #7
 8003042:	4922      	ldr	r1, [pc, #136]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b20      	ldr	r3, [pc, #128]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e032      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4916      	ldr	r1, [pc, #88]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003086:	4b12      	ldr	r3, [pc, #72]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	490e      	ldr	r1, [pc, #56]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309a:	f000 f821 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	490a      	ldr	r1, [pc, #40]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	5ccb      	ldrb	r3, [r1, r3]
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a09      	ldr	r2, [pc, #36]	@ (80030d8 <HAL_RCC_ClockConfig+0x1cc>)
 80030b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030b6:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <HAL_RCC_ClockConfig+0x1d0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fb08 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08003234 	.word	0x08003234
 80030d8:	20000000 	.word	0x20000000
 80030dc:	20000004 	.word	0x20000004

080030e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x94>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d002      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x30>
 800310a:	2b08      	cmp	r3, #8
 800310c:	d003      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x36>
 800310e:	e027      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003110:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003112:	613b      	str	r3, [r7, #16]
      break;
 8003114:	e027      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	0c9b      	lsrs	r3, r3, #18
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	4a17      	ldr	r2, [pc, #92]	@ (800317c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003120:	5cd3      	ldrb	r3, [r2, r3]
 8003122:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800312e:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x94>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	0c5b      	lsrs	r3, r3, #17
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	4a11      	ldr	r2, [pc, #68]	@ (8003180 <HAL_RCC_GetSysClockFreq+0xa0>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a0d      	ldr	r2, [pc, #52]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003142:	fb03 f202 	mul.w	r2, r3, r2
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e004      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a0c      	ldr	r2, [pc, #48]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003154:	fb02 f303 	mul.w	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	613b      	str	r3, [r7, #16]
      break;
 800315e:	e002      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003162:	613b      	str	r3, [r7, #16]
      break;
 8003164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003166:	693b      	ldr	r3, [r7, #16]
}
 8003168:	4618      	mov	r0, r3
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	007a1200 	.word	0x007a1200
 800317c:	08003244 	.word	0x08003244
 8003180:	08003254 	.word	0x08003254
 8003184:	003d0900 	.word	0x003d0900

08003188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003190:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <RCC_Delay+0x34>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <RCC_Delay+0x38>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0a5b      	lsrs	r3, r3, #9
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a4:	bf00      	nop
  }
  while (Delay --);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	60fa      	str	r2, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f9      	bne.n	80031a4 <RCC_Delay+0x1c>
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	20000000 	.word	0x20000000
 80031c0:	10624dd3 	.word	0x10624dd3

080031c4 <memset>:
 80031c4:	4603      	mov	r3, r0
 80031c6:	4402      	add	r2, r0
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d100      	bne.n	80031ce <memset+0xa>
 80031cc:	4770      	bx	lr
 80031ce:	f803 1b01 	strb.w	r1, [r3], #1
 80031d2:	e7f9      	b.n	80031c8 <memset+0x4>

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	2600      	movs	r6, #0
 80031d8:	4d0c      	ldr	r5, [pc, #48]	@ (800320c <__libc_init_array+0x38>)
 80031da:	4c0d      	ldr	r4, [pc, #52]	@ (8003210 <__libc_init_array+0x3c>)
 80031dc:	1b64      	subs	r4, r4, r5
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	f000 f81a 	bl	800321c <_init>
 80031e8:	2600      	movs	r6, #0
 80031ea:	4d0a      	ldr	r5, [pc, #40]	@ (8003214 <__libc_init_array+0x40>)
 80031ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003218 <__libc_init_array+0x44>)
 80031ee:	1b64      	subs	r4, r4, r5
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f855 3b04 	ldr.w	r3, [r5], #4
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08003258 	.word	0x08003258
 8003210:	08003258 	.word	0x08003258
 8003214:	08003258 	.word	0x08003258
 8003218:	0800325c 	.word	0x0800325c

0800321c <_init>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	bf00      	nop
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr

08003228 <_fini>:
 8003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322a:	bf00      	nop
 800322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322e:	bc08      	pop	{r3}
 8003230:	469e      	mov	lr, r3
 8003232:	4770      	bx	lr
